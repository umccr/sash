/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: 'BOLT_SMLV_SOMATIC_RESCUE' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { fp ->
                def fp_out = fp.replaceFirst(/output\//, '')
                return fp.equals('versions.yml') ? null : "${meta.key}/smlv_somatic/rescue/${fp_out}"
            },
        ]
    }

    withName: 'BOLT_SMLV_SOMATIC_ANNOTATE' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { fp ->
                def fp_out = fp.replaceFirst(/output\//, '')
                return fp.equals('versions.yml') ? null : "${meta.key}/smlv_somatic/annotate/${fp_out}"
            },
        ]
    }

    withName: 'BOLT_SMLV_SOMATIC_FILTER' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { fp ->
                def fp_out = fp.replaceFirst(/output\//, '')
                return fp.equals('versions.yml') ? null : "${meta.key}/smlv_somatic/filter/${fp_out}"
            },
        ]
    }

    withName: '.*PAVE_SOMATIC' {
        ext.jarPath = '/opt/pave/pave.jar'
    }

    withName: 'BOLT_SMLV_SOMATIC_REPORT' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { fp ->

                if (fp.equals('versions.yml')) {
                    return null
                } else if (fp.matches('output/.*.pcgr_acmg.grch38.html')) {
                    return "${meta.key}/${meta.tumor_id}.pcgr.html"
                } else {
                    def fp_out = fp.replaceFirst(/output\//, '')
                    return "${meta.key}/smlv_somatic/report/${fp_out}"
                }

            },
        ]
    }

    withName: 'BOLT_SMLV_GERMLINE_PREPARE' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { fp ->
                def fp_out = fp.replaceFirst(/output\//, '')
                return fp.equals('versions.yml') ? null : "${meta.key}/smlv_germline/prepare/${fp_out}"
            },
        ]
    }

    withName: 'BOLT_SMLV_GERMLINE_REPORT' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { fp ->

                if (fp.equals('versions.yml')) {
                    return null
                } else if (fp.matches('output/.*.cpsr.grch38.html')) {
                    return "${meta.key}/${meta.normal_id}.cpsr.html"
                } else {
                    def fp_out = fp.replaceFirst(/output\//, '')
                    return "${meta.key}/smlv_germline/report/${fp_out}"
                }

            },
        ]
    }

    withName: 'BOLT_SV_SOMATIC_ANNOTATE' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { fp ->
                def fp_out = fp.replaceFirst(/output\//, '')
                return fp.equals('versions.yml') ? null : "${meta.key}/sv_somatic/annotate/${fp_out}"
            },
        ]
    }

    withName: 'BOLT_SV_SOMATIC_PRIORITISE' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { fp ->
                def fp_out = fp.replaceFirst(/output\//, '')
                return fp.equals('versions.yml') ? null : "${meta.key}/sv_somatic/prioritise/${fp_out}"
            },
        ]
    }

    withName: 'PURPLE' {
        ext.jarPath = '/opt/purple/purple.jar'
        ext.circosPath = '/opt/conda/bin/circos'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/${filename}" },
        ]
    }

    withName: 'BOLT_OTHER_CANCER_REPORT' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { fp ->

                if (fp.equals('versions.yml')) {
                    return null
                } else if (fp.matches(".*.cancer_report.html")) {
                    return "${meta.key}/${fp}"
                } else {
                    return "${meta.key}/cancer_report/"
                }

            },
        ]
    }

    withName: 'BOLT_OTHER_MULTIQC_REPORT' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { fp ->

                if (fp.equals('versions.yml')) {
                    return null
                } else if (fp.matches(".*.multiqc.html")) {
                    return "${meta.key}/${fp}"
                } else {
                    def fp_out = fp.replaceFirst(/multiqc_report\//, '')
                    return "${meta.key}/${fp_out}"
                }

            },
        ]
    }

    withName: 'ESVEE_CALL' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id}/esvee/${filename}" }
        ]
    }

    withName: '.*:LINX_ANNOTATION:(?:GERMLINE|SOMATIC)|.*:LINX_PLOTTING:VISUALISER' {
        ext.jarPath = '/opt/linx/linx.jar'
    }

    withName: '.*:LINX_ANNOTATION:GERMLINE' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/linx/germline_annotations/" },
        ]
    }

    withName: '.*:LINX_ANNOTATION:SOMATIC' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/linx/somatic_annotations/" },
        ]
    }

    withName: '.*:LINX_PLOTTING:VISUALISER' {
        ext.circosPath = '/opt/conda/bin/circos'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/linx/somatic_plots/" },
        ]
    }

    withName: '.*:LINX_PLOTTING:REPORT' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.key}/${filename}" },
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
